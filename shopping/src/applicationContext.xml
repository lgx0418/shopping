<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">

<!-- 配置连接池: -->
<!-- 引入外部属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
<!-- 配置c3p0连接池 -->
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	<property name="driverClass" value="${jdbc.driver}"></property>
	<property name="jdbcUrl" value="${jdbc.url}"></property>
	<property name="user" value="${jdbc.user}"></property>
	<property name="password" value="${jdbc.password}"></property>
</bean>

<!-- hibernate相关信息 -->
<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
	<!--注入连接池	-->
	<!--ref引用一个已经存在的对象	-->
	<property name="dataSource" ref="dataSource"></property>
	<!--配置hibernate其他属性	-->
	<property name="hibernateProperties">
		<props>
			<!--将java语言转化为关系数据库的方言  -->
			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			<!--在后台打印sql语句  -->
			<prop key="hibernate.show_sql">true</prop>
			<!--格式化sql的语句  -->
			<prop key="hibernate.format_sql">true</prop>
			<!--自动提交到数据库-->
			<prop key="hibernate.connection.autocommit">false</prop>
			<!--自动创建|更新|验证数据库表结构  -->
			<prop key="hibernate.hbm2ddl.auto">update</prop>
		</props>
	</property>
	<!--配置hibernate映射文件	-->
	<property name="mappingResources">
		<list>
			<value>com/shopping/user/vo/User.hbm.xml</value>
			<value>com/shopping/category/vo/Category.hbm.xml</value>
			<value>com/shopping/product/vo/Product.hbm.xml</value>
			<value>com/shopping/categorysecond/vo/CategorySecond.hbm.xml</value>
		</list>
	</property>
</bean>

<!-- 事务管理: -->
<!-- 事务管理器 -->
<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
	<property name="sessionFactory" ref="sessionFactory"/>
</bean>
<!--开启注解事物 -->
<tx:annotation-driven transaction-manager="transactionManager"/>

<!--Action的配置================================================== -->
<!--首页的Action -->
<!--scope="prototype"保证每一个请求都有一个单独的action -->
<bean id="indexAction" class="com.shopping.index.action.IndexAction" scope="prototype">
	<property name="categoryService" ref="categoryService"></property>
	<property name="productService" ref="productService"/>
</bean>
<!--注册界面跳转的Action-->
<!-- 用户模块的Action -->
	<bean id="userAction" class="com.shopping.user.action.registerAction" scope="prototype">
		<!-- 注入Service -->
		<property name="userService" ref="userService"/>
		
	</bean>
	<!--验证码的ACTION -->
	<bean id="checkImgAction" class="com.shopping.user.action.CheckImgAction" scope="prototype">
	</bean>
	
	<!--商品的action  -->
	<bean id="productAction" class="com.shopping.product.action.ProductAction" scope="prototype">
		<property name="productService" ref="productService"/>
	</bean>
<!-- Service的配置  =============================================-->
	<bean id="userService" class="com.shopping.user.service.UserService">
		<property name="userDao" ref="userDao"/>
	</bean>
	<bean id="categoryService" class="com.shopping.category.service.CategoryService">
		<property name="categoryDao" ref="categoryDao"></property>
	</bean>
	<bean id="productService" class="com.shopping.product.service.ProductService">
		<property name="productDao" ref="productDao"/>
	</bean>
<!-- Dao的配置  =============================================-->
	<bean id="userDao" class="com.shopping.user.dao.UserDao">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="categoryDao" class="com.shopping.category.dao.CategoryDao">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="productDao" class="com.shopping.product.dao.ProductDao">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
</beans>